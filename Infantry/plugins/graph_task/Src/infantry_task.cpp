/*
 * _______________#########_______________________ 
 * ______________############_____________________ 
 * ______________#############____________________ 
 * _____________##__###########___________________ 
 * ____________###__######_#####__________________ 
 * ____________###_#######___####_________________ 
 * ___________###__##########_####________________ 
 * __________####__###########_####_______________ 
 * ________#####___###########__#####_____________ 
 * _______######___###_########___#####___________ 
 * _______#####___###___########___######_________ 
 * ______######___###__###########___######_______ 
 * _____######___####_##############__######______ 
 * ____#######__#####################_#######_____ 
 * ____#######__##############################____ 
 * ___#######__######_#################_#######___ 
 * ___#######__######_######_#########___######___ 
 * ___#######____##__######___######_____######___ 
 * ___#######________######____#####_____#####____ 
 * ____######________#####_____#####_____####_____ 
 * _____#####________####______#####_____###______ 
 * ______#####______;###________###______#________ 
 * ________##_______####________####______________ 
 * 
 * @Date: 2024-01-16 20:40:50
 * @LastEditors: KraHsu && 1191393280@qq.com
 * @LastEditTime: 2024-01-17 01:56:52
 * Copyright (c) 2024 by KraHsu, All Rights Reserved. 
 */

#include "infantry_task.h"

namespace infantry {
    Task::Task(uint32_t task_id, std::function<void()> &&task)
            : _task_id{task_id}, _task{std::move(task)}, _dependents_top{0}, _successors_top{0}, _successors{0},
              _dependents{0}, _degree{0} {}

    void Task::addDependency(Task *task) {
        _dependents[_dependents_top++] = task->_task_id;
        task->_successors[task->_successors_top++] = _task_id;
        _degree++;
    }

    Task &Task::operator--() {
        return *this;
    }

    Task &Task::operator--(int) {
        return *this;
    }

    Task &Task::operator>(Task &other) {
        other.addDependency(this);
        return other;
    }

    Task &Task::operator<(Task &other) {
        addDependency(&other);
        return other;
    }
} // infantry
