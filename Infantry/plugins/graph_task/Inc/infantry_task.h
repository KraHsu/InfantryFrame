/*
 * _______________#########_______________________ 
 * ______________############_____________________ 
 * ______________#############____________________ 
 * _____________##__###########___________________ 
 * ____________###__######_#####__________________ 
 * ____________###_#######___####_________________ 
 * ___________###__##########_####________________ 
 * __________####__###########_####_______________ 
 * ________#####___###########__#####_____________ 
 * _______######___###_########___#####___________ 
 * _______#####___###___########___######_________ 
 * ______######___###__###########___######_______ 
 * _____######___####_##############__######______ 
 * ____#######__#####################_#######_____ 
 * ____#######__##############################____ 
 * ___#######__######_#################_#######___ 
 * ___#######__######_######_#########___######___ 
 * ___#######____##__######___######_____######___ 
 * ___#######________######____#####_____#####____ 
 * ____######________#####_____#####_____####_____ 
 * _____#####________####______#####_____###______ 
 * ______#####______;###________###______#________ 
 * ________##_______####________####______________ 
 * 
 * @Date: 2024-01-16 20:40:50
 * @LastEditors: KraHsu && 1191393280@qq.com
 * @LastEditTime: 2024-01-17 01:56:37
 * Copyright (c) 2024 by KraHsu, All Rights Reserved. 
 */

#pragma once

#include "infantry_thread.h"

#include <vector>
#include <functional>

namespace infantry {
    class Task {
    public:
        std::function<void()> _task; // 任务的执行逻辑
        uint32_t _dependents[32]; // 直接依赖的任务
        uint32_t _dependents_top;
        uint32_t _successors[32]; // 直接被依赖的任务
        uint32_t _successors_top;
        uint32_t _degree; // 入度计数
        uint32_t _task_id;
    public:
        Task(uint32_t task_id, std::function<void()> &&task);

        void addDependency(Task *task);

        Task &operator--();

        Task &operator--(int);

        Task &operator>(Task &other);

        Task &operator<(Task &other);

    };
} // infantry
